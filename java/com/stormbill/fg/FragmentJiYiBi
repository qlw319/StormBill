package com.stormbill.stormbill.fg;

import android.app.Service;
import android.content.Context;
import android.os.Bundle;
import android.os.Handler;
import android.support.v4.app.Fragment;
import android.support.v4.view.ViewPager;
import android.util.Log;
import android.view.Gravity;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.view.WindowManager;
import android.view.inputmethod.InputMethodManager;
import android.widget.AdapterView;
import android.widget.Button;
import android.widget.CalendarView;
import android.widget.EditText;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.PopupWindow;
import android.widget.RelativeLayout;
import android.widget.TextView;
import android.widget.Toast;

import com.stormbill.stormbill.R;
import com.stormbill.stormbill.activity.MainActivity;
import com.stormbill.stormbill.adapter.MemberGroupAdapter;
import com.stormbill.stormbill.adapter.ViewPagerAdapter;
import com.stormbill.stormbill.callback.FragmentCallBack;
import com.stormbill.stormbill.common.Calculator;
import com.stormbill.stormbill.common.Common;
import com.stormbill.stormbill.common_type.RecordItemDetails;
import com.stormbill.stormbill.datastructs.ControlCenter;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.TimeZone;

public class FragmentJiYiBi extends Fragment implements View.OnClickListener
{
	private FragmentCallBack fragmentCallBack = null;
	private LayoutInflater mInflater;
	private View mRootView;
	private ImageButton mBtnReturn;
	private Button mBtnIncome;
	private Button mBtnPay;

	private ViewPagerAdapter mViewPagerAdapter;
	private ViewPager mViewPager;
	private ArrayList<Fragment> mFragmentList;

	private View mKeyboard;
	private LinearLayout mLlMoney;
	private TextView mTvMoney;
	private RelativeLayout mLayout;
	private TextView mTvBigMoney;
	private TextView mTvSmallMoney;
	private Calculator mCalculator;
	private String strMoney = "0.00";
	private String strBigFormula = "0";
	private String strSmallFormula = "0";
	private boolean bIsPay = true;

	private PopupWindow mKeyBoardPopWindow;
	private Button mBtnTime;

	private PopupWindow mCalenderPopWindow;

	private PopupWindow m_MemberPopupWindow;
	private View m_MemberView;
	private ListView lv_member_group;

	private PopupWindow m_AccountPopupWindow;
	private View m_AccountView;

	private PopupWindow m_RemarkPopupWindow;
	private View m_RemarkView;
	private EditText mEditText;
	private InputMethodManager imm;

	@Override
	public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)
	{
		return inflater.inflate(R.layout.fg_jiyibi_addbill, container, false);
	}

	@Override
	public void onViewCreated(View view, Bundle savedInstanceState)
	{
		super.onViewCreated(view, savedInstanceState);
		initViews(view);
		initDatas();
		initEvents();
	}

	@Override
	public void onHiddenChanged(boolean hidden)
	{
		if(!hidden)
		{
			Log.d("hehe", "onHiddenChanged");
			Calendar calendar = Calendar.getInstance(TimeZone.getTimeZone("GMT+08:00"));
			SimpleDateFormat sfYear = new SimpleDateFormat("M月d日");
			String strTime = sfYear.format(calendar.getTime());

			mBtnTime.setText(strTime);

			Common.mRecordItemDetails.nYear = calendar.get(Calendar.YEAR);
			Common.mRecordItemDetails.nMonth = calendar.get(Calendar.MONTH) + 1;
			Common.mRecordItemDetails.nDay = calendar.get(Calendar.DATE);

			showKeyBoard(mRootView);
		}
	}

	private void initViews(View view)
	{
		mRootView = view;
		Common.mTvType = (TextView)view.findViewById(R.id.id_money_type);
		Common.mImgType = (ImageView)view.findViewById(R.id.id_type_img);
		mBtnReturn = (ImageButton)view.findViewById(R.id.id_btn_return);
		mBtnIncome = (Button)view.findViewById(R.id.id_btn_income);
		mBtnPay = (Button)view.findViewById(R.id.id_btn_pay);
		mLlMoney = (LinearLayout)view.findViewById(R.id.id_money);
		mLayout = (RelativeLayout)view.findViewById(R.id.id_calculate_result);
		mTvMoney = (TextView)view.findViewById(R.id.id_money_number);
		mTvBigMoney = (TextView)view.findViewById(R.id.id_big_money);
		mTvSmallMoney = (TextView)view.findViewById(R.id.id_small_money);
		mViewPager = (ViewPager)view.findViewById(R.id.viewpager);
		mInflater = LayoutInflater.from(view.getContext());

		mBtnPay.setTextColor(getResources().getColor(R.color.blues));
		bIsPay = true;
		mBtnIncome.setTextColor(getResources().getColor(R.color.black));
		mBtnPay.setOnClickListener(this);
		mBtnIncome.setOnClickListener(this);
		mLlMoney.setOnClickListener(this);

		//
		m_MemberView = mInflater.inflate(R.layout.group_list, null);
		lv_member_group = (ListView)m_MemberView.findViewById(R.id.lvGroup);
		//
		m_RemarkView = mInflater.inflate(R.layout.layout_remark, null);
		mEditText = (EditText)m_RemarkView.findViewById(R.id.id_edit_remark);
		m_RemarkView.findViewById(R.id.id_imageButton_ok).setOnClickListener(this);
		m_RemarkView.findViewById(R.id.id_imageButton_cancel).setOnClickListener(this);

		showKeyBoard(view);
	}

	private void initDatas()
	{
		Common.mTvType.setText(ControlCenter.GetPayBillTypes().get(0).strName);
		Common.mImgType.setImageResource(ControlCenter.GetPayBillTypes().get(0).nPicture);

		mFragmentList = new ArrayList<>();
		FragmentIncomeType fragmentIncomeType = new FragmentIncomeType();
		FragmentPayType fragmentPayType = new FragmentPayType();

		mFragmentList.add(fragmentPayType);
		mFragmentList.add(fragmentIncomeType);

		mViewPagerAdapter = new ViewPagerAdapter(getChildFragmentManager(), mFragmentList);
		mCalculator = new Calculator();
		if(Common.mRecordItemDetails == null)
			Common.mRecordItemDetails = new RecordItemDetails();
	}

	private void initEvents()
	{
		mBtnReturn.setOnClickListener(this);
		mViewPager.setAdapter(mViewPagerAdapter);
		mViewPager.setCurrentItem(0);
		mViewPager.addOnPageChangeListener(new ViewPager.OnPageChangeListener()
		{
			@Override
			public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels)
			{

			}

			@Override
			public void onPageSelected(int position)
			{
				if(position == 0)
				{
					mBtnPay.setTextColor(getResources().getColor(R.color.blues));
					mBtnIncome.setTextColor(getResources().getColor(R.color.black));
					bIsPay= true;
				}
				else if(position == 1)
				{
					mBtnIncome.setTextColor(getResources().getColor(R.color.blues));
					mBtnPay.setTextColor(getResources().getColor(R.color.black));
					bIsPay = false;
				}
			}

			@Override
			public void onPageScrollStateChanged(int state)
			{

			}
		});
	}

	@Override
	public void onClick(View view)
	{
		switch(view.getId())
		{
			case R.id.id_btn_income:
			{
				mViewPager.setCurrentItem(1);
			}
			break;
			case R.id.id_btn_pay:
			{
				mViewPager.setCurrentItem(0);
			}
			break;

			case R.id.id_money:
			{
				showKeyBoard(mRootView);
			}
			break;
			case R.id.id_btn_return:
			{
				fragmentCallBack.callbackFun(null);
			}
			break;
			case R.id.id_btn_cash:
			{
				Log.d("hehe", "id_btn_cash");
				showAccountPopupWindow(mRootView);
			}
			break;
			case R.id.id_btn_calender:
			{
				Log.d("hehe", "id_btn_calender");
				showCalender(mRootView);
			}
			break;
			case R.id.id_btn_member:
			{
				Log.d("hehe", "id_btn_member");
				showMemberPopupWindow(mRootView);
			}
			break;
			case R.id.id_btn_remark:
			{
				Log.d("hehe", "id_btn_remark");
				showRemarkPopupWindow(mRootView);
				popupInputMethodWindow();
			}
			break;
			case R.id.id_imageButton_ok:
			{
				String strTemp = mEditText.getText().toString();
				Common.mRecordItemDetails.strRemark = strTemp;
				mEditText.setText("");

				imm.hideSoftInputFromWindow(mEditText.getWindowToken(), 0);
				m_RemarkPopupWindow.dismiss();
			}
			break;
			case R.id.id_imageButton_cancel:
			{
				mEditText.setText("");
				Common.mRecordItemDetails.strRemark = "";

				imm.hideSoftInputFromWindow(mEditText.getWindowToken(), 0);
				m_RemarkPopupWindow.dismiss();
			}
			break;

			case R.id.id_btn_seven:
			case R.id.id_btn_eight:
			case R.id.id_btn_nine:
			case R.id.id_btn_four:
			case R.id.id_btn_five:
			case R.id.id_btn_six:
			case R.id.id_btn_one:
			case R.id.id_btn_two:
			case R.id.id_btn_three:
			case R.id.id_btn_zero:
			case R.id.id_btn_point:
			case R.id.id_btn_del:
			case R.id.id_btn_add:
			case R.id.id_btn_decrease:
			{
				mCalculator.calculate(view.getId());
				boolean bStartCalculated = mCalculator.isStartCalculate();
				if(bStartCalculated)
				{
					mTvMoney.setVisibility(View.GONE);
					mLayout.setVisibility(View.VISIBLE);
				}
				else
				{
					mTvMoney.setVisibility(View.VISIBLE);
					mLayout.setVisibility(View.GONE);
				}

				strMoney = mCalculator.getResult();
				strBigFormula = mCalculator.getResult();
				strSmallFormula = mCalculator.getFormula();

				mTvMoney.setText(strMoney);
				mTvBigMoney.setText(strBigFormula);
				mTvSmallMoney.setText(strSmallFormula);
			}
			break;
			case R.id.id_btn_ac:
			case R.id.id_btn_ok:
			{
				Double d = Double.valueOf(strMoney);
				if(d <= 0)
					Toast.makeText(mInflater.getContext(), "金额不能为0", Toast.LENGTH_SHORT).show();
				else
				{
					new Thread(new Runnable()
					{
						@Override
						public void run()
						{
							if(bIsPay)
								Common.mRecordItemDetails.dPayMoney = Double.valueOf(strMoney);
							else
								Common.mRecordItemDetails.dIncomeMoney = Double.valueOf(strMoney);

							String strTemp = mEditText.getText().toString();
							Common.mRecordItemDetails.strRemark = strTemp;

							ControlCenter.AddARecordItem(Common.mRecordItemDetails);
							ControlCenter.GetRecordItemDetails();
							Common.mAddFinish = true;
							mCalculator.reset();

							strMoney = mCalculator.getResult();
							strBigFormula = mCalculator.getResult();
							strSmallFormula = mCalculator.getFormula();

							mTvMoney.setText(strMoney);
							mTvBigMoney.setText(strBigFormula);
							mTvSmallMoney.setText(strSmallFormula);

							mTvMoney.setVisibility(View.VISIBLE);
							mLayout.setVisibility(View.GONE);
						}
					}).start();

					if(view.getId() == R.id.id_btn_ok)
					{
						fragmentCallBack.callbackFun(null);
						mKeyBoardPopWindow.dismiss();
					}
				}
			}
			break;
			default:
				break;
		}
	}

	@Override
	public void onAttach(Context context)
	{
		super.onAttach(context);
		fragmentCallBack = (MainActivity)context;
	}

	public void showKeyBoard(View parent)
	{
		if(mKeyBoardPopWindow == null)
		{
			mKeyboard = mInflater.inflate(R.layout.fg_jiyibi_calculator, null);

			initKeyBoardPopWindowEvent(mKeyboard);
			mKeyBoardPopWindow = new PopupWindow(mKeyboard, LinearLayout.LayoutParams.MATCH_PARENT, LinearLayout.LayoutParams.WRAP_CONTENT);
		}

		mKeyBoardPopWindow.setOutsideTouchable(true);
		mKeyBoardPopWindow.setFocusable(true);
		mKeyBoardPopWindow.showAtLocation(parent, Gravity.BOTTOM, 0, 0);
		mKeyBoardPopWindow.setAnimationStyle(R.style.popwindow_anim_style);
		mKeyBoardPopWindow.setOnDismissListener(new PopupWindow.OnDismissListener()
		{
			@Override
			public void onDismiss()
			{
//				fragmentCallBack.callbackFun(null);
			}
		});
	}

	private void initKeyBoardPopWindowEvent(View view)
	{
		Calendar calendar = Calendar.getInstance(TimeZone.getTimeZone("GMT+08:00"));
		SimpleDateFormat sfYear = new SimpleDateFormat("M月d日");
		String strTime = sfYear.format(calendar.getTime());

		mBtnTime = (Button)view.findViewById(R.id.id_btn_calender);
		mBtnTime.setText(strTime);
		mBtnTime.setOnClickListener(this);

		if(Common.mRecordItemDetails == null)
			Common.mRecordItemDetails = new RecordItemDetails();
		Common.mRecordItemDetails.nYear = calendar.get(Calendar.YEAR);
		Common.mRecordItemDetails.nMonth = calendar.get(Calendar.MONTH) + 1;
		Common.mRecordItemDetails.nDay = calendar.get(Calendar.DATE);

		view.findViewById(R.id.id_btn_cash).setOnClickListener(this);
		view.findViewById(R.id.id_btn_member).setOnClickListener(this);
		view.findViewById(R.id.id_btn_remark).setOnClickListener(this);
		view.findViewById(R.id.id_btn_seven).setOnClickListener(this);
		view.findViewById(R.id.id_btn_eight).setOnClickListener(this);
		view.findViewById(R.id.id_btn_nine).setOnClickListener(this);
		view.findViewById(R.id.id_btn_four).setOnClickListener(this);
		view.findViewById(R.id.id_btn_five).setOnClickListener(this);
		view.findViewById(R.id.id_btn_six).setOnClickListener(this);
		view.findViewById(R.id.id_btn_one).setOnClickListener(this);
		view.findViewById(R.id.id_btn_two).setOnClickListener(this);
		view.findViewById(R.id.id_btn_three).setOnClickListener(this);
		view.findViewById(R.id.id_btn_zero).setOnClickListener(this);
		view.findViewById(R.id.id_btn_ac).setOnClickListener(this);
		view.findViewById(R.id.id_btn_point).setOnClickListener(this);
		view.findViewById(R.id.id_btn_del).setOnClickListener(this);
		view.findViewById(R.id.id_btn_add).setOnClickListener(this);
		view.findViewById(R.id.id_btn_decrease).setOnClickListener(this);
		view.findViewById(R.id.id_btn_ok).setOnClickListener(this);
	}

	private void showAccountPopupWindow(View parent)
	{
		if(m_AccountPopupWindow == null)
		{
			m_AccountView = mInflater.inflate(R.layout.group_list, null);
			TextView tv = (TextView)m_AccountView.findViewById(R.id.title);
			tv.setText("选择账户");
			tv.setTextSize(20);
			lv_member_group = (ListView)m_AccountView.findViewById(R.id.lvGroup);
			m_AccountPopupWindow = new PopupWindow(m_AccountView, LinearLayout.LayoutParams.MATCH_PARENT, 500);
		}

		m_AccountPopupWindow.setFocusable(true);
		m_AccountPopupWindow.setOutsideTouchable(true);
		m_AccountPopupWindow.showAtLocation(parent, Gravity.BOTTOM, 0, 0);

		lv_member_group.setOnItemClickListener(new AdapterView.OnItemClickListener()
		{
			@Override
			public void onItemClick(AdapterView<?> adapterView, View view, int position, long id)
			{
				if(m_AccountPopupWindow != null)
					m_AccountPopupWindow.dismiss();

				Common.mRecordItemDetails.nWalletTypeId = ControlCenter.GetWalletTypes().get(position).nWalletTypeID;
			}
		});
	}

	private void showCalender(View parent)
	{
		if(mCalenderPopWindow == null)
		{
			View calender = mInflater.inflate(R.layout.layout_calender_view, null);
			CalendarView calendarView = (CalendarView)calender.findViewById(R.id.calendarView);
			calendarView.setOnDateChangeListener(new CalendarView.OnDateChangeListener()
			{
				@Override
				public void onSelectedDayChange(CalendarView calendarView, int i, int i1, int i2)
				{
					String strTime = Integer.toString(i1 + 1) + "月" + Integer.toString(i2) + "日";
					int year = i;
					int month = i1 + 1;
					int day = i2;

					Calendar calendar = Calendar.getInstance(TimeZone.getTimeZone("GMT+08:00"));
									//  当前    		选择
					if(calendar.get(Calendar.YEAR) < year)
					{
						Toast.makeText(mInflater.getContext(), "日期不能超过今年", Toast.LENGTH_SHORT).show();
						return;
					}
					else if(calendar.get(Calendar.YEAR) < year &&
							calendar.get(Calendar.MONTH) + 1 < month)
					{
						Toast.makeText(mInflater.getContext(), "日期不能超过当月", Toast.LENGTH_SHORT).show();
						return;
					}
					else if(calendar.get(Calendar.YEAR) < year &&
							calendar.get(Calendar.MONTH) + 1 < month &&
							calendar.get(Calendar.DATE) < day)
					{
						Toast.makeText(mInflater.getContext(), "日期不能超过今天", Toast.LENGTH_SHORT).show();
						return;
					}
					else
					{
						Toast.makeText(mInflater.getContext(), "选择了: " + year + "年" + month + "月" + day + "日", Toast.LENGTH_SHORT).show();
						mBtnTime.setText(strTime);
						mCalenderPopWindow.dismiss();

						Common.mRecordItemDetails.nYear = year;
						Common.mRecordItemDetails.nMonth = month;
						Common.mRecordItemDetails.nDay = day;
					}
				}
			});
			mCalenderPopWindow = new PopupWindow(calender, LinearLayout.LayoutParams.MATCH_PARENT, LinearLayout.LayoutParams.WRAP_CONTENT);
		}

		mCalenderPopWindow.setOutsideTouchable(true);
		mCalenderPopWindow.setFocusable(true);
		mCalenderPopWindow.showAtLocation(parent, Gravity.BOTTOM, 0, 0);
	}

	private void showMemberPopupWindow(View parent)
	{
		if(m_MemberPopupWindow == null)
			m_MemberPopupWindow = new PopupWindow(m_MemberView, LinearLayout.LayoutParams.MATCH_PARENT, 500);

		m_MemberPopupWindow.setFocusable(true);
		m_MemberPopupWindow.setOutsideTouchable(true);
		m_MemberPopupWindow.showAtLocation(parent, Gravity.BOTTOM, 0, 0);

		lv_member_group.setAdapter(new MemberGroupAdapter(mInflater.getContext(), R.layout.group_member_view, ControlCenter.GetMemberTypes()));

		lv_member_group.setOnItemClickListener(new AdapterView.OnItemClickListener()
		{
			@Override
			public void onItemClick(AdapterView<?> adapterView, View view, int position, long id)
			{
				if(m_MemberPopupWindow != null)
					m_MemberPopupWindow.dismiss();

				TextView tv = (TextView)m_MemberView.findViewById(R.id.title);

				Common.mRecordItemDetails.strMember = tv.getText().toString();
			}
		});
	}

	private void showRemarkPopupWindow(View parent)
	{
		if(m_RemarkPopupWindow == null)
			m_RemarkPopupWindow = new PopupWindow(m_RemarkView, LinearLayout.LayoutParams.MATCH_PARENT, LinearLayout.LayoutParams.WRAP_CONTENT);

		m_RemarkPopupWindow.setFocusable(true);
		m_RemarkPopupWindow.setOutsideTouchable(true);
		m_RemarkPopupWindow.setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE);
		m_RemarkPopupWindow.showAtLocation(parent, Gravity.BOTTOM, 0, 0);

		m_RemarkPopupWindow.setOnDismissListener(new PopupWindow.OnDismissListener()
		{
			@Override
			public void onDismiss()
			{
				boolean isOpen = imm.isActive();
				if(!isOpen)
					imm.hideSoftInputFromWindow(mEditText.getWindowToken(), 0);
				Log.d("hehe", "onDismiss " + isOpen);
			}
		});
	}

	private void popupInputMethodWindow()
	{
		Handler handler = new Handler();
		handler.postDelayed(new Runnable()
		{
			@Override
			public void run()
			{
				imm = (InputMethodManager)mInflater.getContext().getSystemService(Service.INPUT_METHOD_SERVICE);
				imm.showSoftInput(mEditText, InputMethodManager.HIDE_NOT_ALWAYS);
			}
		}, 0);
	}
}
