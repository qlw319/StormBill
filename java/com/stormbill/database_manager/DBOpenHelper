package com.stormbill.stormbill.database_manager;

import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;
import android.os.Environment;

import com.stormbill.stormbill.common_type.BillTypes;
import com.stormbill.stormbill.common_type.RecordItemDetails;
import com.stormbill.stormbill.common_type.WalletTypes;

import java.io.File;
import java.util.ArrayList;

import static com.stormbill.stormbill.initialization_information.CommonInitInfor.InitMembers;

public class DBOpenHelper extends SQLiteOpenHelper
{
	private static final String ROOT_PATH = Environment.getExternalStorageDirectory().getPath();
	private static final String FILEFLAG = File.separator;
	private static final String FILENAME = "StormTotem/user.db";

	private static final String DATABASE_NAME = ROOT_PATH + FILEFLAG + FILENAME;
	private static final int DATABASE_VERSION = 1;

	private SQLiteDatabase m_dbRead = null;
	private SQLiteDatabase m_dbWrite = null;
	private boolean m_bInitialization = false;

	public DBOpenHelper(Context context)
	{
		super(context, DATABASE_NAME, null, DATABASE_VERSION);
		m_dbRead = getReadableDatabase();
		m_dbWrite = getWritableDatabase();
		m_bInitialization = true;
	}

	public void Release()
	{
		m_dbRead.close();
		m_dbWrite.close();
	}

	// 第一次使用软件
	@Override
	public void onCreate(SQLiteDatabase db)
	{
		String sql = "CREATE TABLE bill_record (" +
				"    timestamp DATETIME PRIMARY KEY" +
				"                       NOT NULL" +
				"                       DEFAULT CURRENT_TIMESTAMP," +
				"    year      INT      NOT NULL," +
				"    month     INT      NOT NULL," +
				"    day       INT      NOT NULL," +
				"    hour      INT      NOT NULL," +
				"    minute    INT      NOT NULL," +
				"    billId    INT      NOT NULL," +
				"    walletId  INT      NOT NULL," +
				"    pay       DOUBLE   NOT NULL," +
				"    income    DOUBLE   NOT NULL," +
				"    member    TEXT," +
				"    remark    TEXT );";

		String sq2 = "CREATE TABLE income_bill_type_tab" +
				"    icon_name TEXT     NOT NULL," +
				"    icon_bg   TEXT     NOT NULL," +
				"    icon_id   INT      NOT NULL);";

		String sq3 = "CREATE TABLE pay_bill_type_tab" +
				"    icon_name TEXT     NOT NULL," +
				"    icon_bg   TEXT     NOT NULL," +
				"    icon_id   INT      NOT NULL);";

		String sq4 = "CREATE TABLE wallet_type_tab" +
				"    wallet_name TEXT	NOT NULL" +
				"  wallet_layout TEXT	NOT NULL" +
				"   wallet_color TEXT	NOT NULL" +
				"   wallet_id	 INT	NOT NULL);";

		String sq5 = "CREATE TABLE member_tab" + "   member_name	 TEXT	NOT NULL);";

		String sq6 = "CREATE TABLE id_relative_tab" +
				"  income_bill_id_relative INT	NOT NULL" +
				"  pay_bill_id_relative INT	NOT NULL" +
				"wallet_id_relative INT NOT NULL);";

		db.beginTransaction();
		try
		{
			db.execSQL(sql);
			db.execSQL(sq2);
			db.execSQL(sq3);
			db.execSQL(sq4);
			db.execSQL(sq5);
			db.execSQL(sq6);
			db.setTransactionSuccessful();
		}
		finally
		{
			db.endTransaction();
		}

		InitializationBillRecord();
		InitializationIncomeBillTypeTab();
		InitializationPayBillTypeTab();
		InitializationWalletTypeTab();
		InitializationMemberTab();
		InitializationIdRelativeTab();
	}

	// Initialization bill_record
	private void InitializationBillRecord()
	{
	}

	// Initialization income_bill_type_tab
	private void InitializationIncomeBillTypeTab()
	{
	}

	// Initialization pay_bill_type_tab
	private void InitializationPayBillTypeTab()
	{
	}

	// Initialization wallet_type_tab
	private void InitializationWalletTypeTab()
	{
	}

	// Initialization member_tab
	private void InitializationMemberTab()
	{
		for(int i = 0; i < InitMembers.length; ++i)
			AddMemberTab(InitMembers[i]);
	}

	// Initialization id_relative_tab
	private void InitializationIdRelativeTab()
	{
		this.AddIdRelativeTab(0, 0, 0);
	}

	@Override
	public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion)
	{

	}

	public boolean AddBillRecord(RecordItemDetails ddt)
	{
		if(FindInBillRecord(ddt) != null)
			return false;

		String sql1 = "select * from bill_record order by timestamp desc";
		String sql2 = "insert into bill_record (year, month, day, hour, minute, billId, walletId, pay, income, member, remark) values(?,?,?,?,?,?,?,?,?,?,?)";

		int nCountBefore = 0;
		Cursor cursor = m_dbRead.rawQuery(sql1, null);
		if(cursor.moveToFirst())
			nCountBefore = cursor.getCount();

		m_dbWrite.beginTransaction();
		try
		{
			m_dbWrite.execSQL(sql2, new Object[]{
					ddt.nYear,
					ddt.nMonth,
					ddt.nDay,
					ddt.nHour,
					ddt.nMinute,
					ddt.nBillTypeId,
					ddt.nWalletTypeId,
					ddt.dPayMoney,
					ddt.dIncomeMoney,
					ddt.strMember,
					ddt.strRemark
			});
			m_dbWrite.setTransactionSuccessful();
		}
		finally
		{
			m_dbWrite.endTransaction();
		}

		cursor = m_dbRead.rawQuery(sql1, null);
		int nCountAfter = cursor.getCount();

		if(nCountBefore >= nCountAfter)
			return false;

		if(cursor.moveToFirst())
			ddt.strTimestamp = cursor.getString(cursor.getColumnIndex("timestamp"));

		cursor.close();
		return true;
	}

	public boolean DeleteInBillRecord(RecordItemDetails ddt)
	{
		String sql2 = "delete from bill_record where timestamp=?";

		if(FindInBillRecord(ddt) != null)
		{
			m_dbWrite.beginTransaction();
			try
			{
				m_dbWrite.execSQL(sql2, new Object[]{ddt.strTimestamp});
				m_dbWrite.setTransactionSuccessful();
			}
			finally
			{
				m_dbWrite.endTransaction();
			}
		}
		else
			return false;

		if(FindInBillRecord(ddt) != null)
			return false;

		return true;
	}

	public RecordItemDetails FindInBillRecord(RecordItemDetails ddt)
	{
		String sql = "select * from bill_record where timestamp=?";
		Cursor cursor = m_dbRead.rawQuery(sql, new String[]{ddt.strTimestamp});
		if(cursor.moveToFirst())
		{
			RecordItemDetails newddt = new RecordItemDetails();
			newddt.strTimestamp = cursor.getString(cursor.getColumnIndex("timestamp"));
			newddt.nYear = cursor.getInt(cursor.getColumnIndex("year"));
			newddt.nMonth = cursor.getInt(cursor.getColumnIndex("month"));
			newddt.nDay = cursor.getInt(cursor.getColumnIndex("day"));
			newddt.nHour = cursor.getInt(cursor.getColumnIndex("hour"));
			newddt.nMinute = cursor.getInt(cursor.getColumnIndex("minute"));
			newddt.nBillTypeId = cursor.getInt(cursor.getColumnIndex("billId"));
			newddt.nWalletTypeId = cursor.getInt(cursor.getColumnIndex("walletId"));
			newddt.dIncomeMoney = cursor.getDouble(cursor.getColumnIndex("income"));
			newddt.dPayMoney = cursor.getDouble(cursor.getColumnIndex("pay"));
			newddt.strMember = cursor.getString(cursor.getColumnIndex("member"));
			newddt.strRemark = cursor.getString(cursor.getColumnIndex("remark"));

			cursor.close();
			return newddt;
		}

		return null;
	}

	public boolean UpdateBillRecord(RecordItemDetails ddt)
	{
		String sql = "update bill_record " +
				"set year=?,month=?,day=?,hour=?,minute=?,billId=?,walletId=?,pay=?,income=?,member,remark=? " +
				"where timestamp=?";

		if(FindInBillRecord(ddt) != null)
			return false;

		m_dbWrite.beginTransaction();
		try
		{
			m_dbWrite.execSQL(sql, new Object[]{
					ddt.nYear,
					ddt.nMonth,
					ddt.nDay,
					ddt.nHour,
					ddt.nMinute,
					ddt.nBillTypeId,
					ddt.nWalletTypeId,
					ddt.dPayMoney,
					ddt.dIncomeMoney,
					ddt.strMember,
					ddt.strRemark,
					ddt.strTimestamp
			});
			m_dbWrite.setTransactionSuccessful();
		}
		finally
		{
			m_dbWrite.endTransaction();
		}

		RecordItemDetails newddt = FindInBillRecord(ddt);
		if(newddt == null)
			return false;

		if(!ddt.strTimestamp.equals(newddt.strTimestamp))
			return false;

		return true;
	}

	public boolean GetAllBillRecords(ArrayList<RecordItemDetails> arrRecordList)
	{
		arrRecordList.clear();

		String sql = "select * from bill_record order by timestamp desc";
		Cursor cursor = m_dbRead.rawQuery(sql, null);
		if(cursor.moveToFirst() == false)
			return false;

		int nItemCount = cursor.getCount();
		for(int i = 0; i < nItemCount; ++i)
		{
			RecordItemDetails item = new RecordItemDetails();

			item.strTimestamp = cursor.getString(cursor.getColumnIndex("timestamp"));
			item.nYear = cursor.getInt(cursor.getColumnIndex("year"));
			item.nMonth = cursor.getInt(cursor.getColumnIndex("month"));
			item.nDay = cursor.getInt(cursor.getColumnIndex("day"));
			item.nHour = cursor.getInt(cursor.getColumnIndex("hour"));
			item.nMinute = cursor.getInt(cursor.getColumnIndex("minute"));
			item.nBillTypeId = cursor.getInt(cursor.getColumnIndex("billId"));
			item.nWalletTypeId = cursor.getInt(cursor.getColumnIndex("walletID"));
			item.dPayMoney = cursor.getDouble(cursor.getColumnIndex("pay"));
			item.dIncomeMoney = cursor.getDouble(cursor.getColumnIndex("income"));
			item.strMember = cursor.getString(cursor.getColumnIndex("member"));
			item.strRemark = cursor.getString(cursor.getColumnIndex("remark"));
			arrRecordList.add(item);
		}

		return true;
	}

	public RecordItemDetails GetDataByIndexFromBillRecord(int index)
	{
		String sql = "select * from bill_record order by timestamp desc";
		Cursor cursor = m_dbRead.rawQuery(sql, null);
		RecordItemDetails newddt = new RecordItemDetails();
		if(cursor.moveToFirst())
		{
			for(int i = 0; i < index; i++)
				cursor.moveToNext();

			newddt.strTimestamp = cursor.getString(cursor.getColumnIndex("timestamp"));
			newddt.nYear = cursor.getInt(cursor.getColumnIndex("year"));
			newddt.nMonth = cursor.getInt(cursor.getColumnIndex("month"));
			newddt.nDay = cursor.getInt(cursor.getColumnIndex("day"));
			newddt.nHour = cursor.getInt(cursor.getColumnIndex("hour"));
			newddt.nMinute = cursor.getInt(cursor.getColumnIndex("minute"));
			newddt.nBillTypeId = cursor.getInt(cursor.getColumnIndex("billId"));
			newddt.nWalletTypeId = cursor.getInt(cursor.getColumnIndex("walletID"));
			newddt.dPayMoney = cursor.getDouble(cursor.getColumnIndex("pay"));
			newddt.dIncomeMoney = cursor.getDouble(cursor.getColumnIndex("income"));
			newddt.strMember = cursor.getString(cursor.getColumnIndex("member"));
			newddt.strRemark = cursor.getString(cursor.getColumnIndex("remark"));
		}
		cursor.close();
		return newddt;
	}

	public int GetCountFromBillRecord()
	{
		String sql = "select * from bill_record";
		Cursor cursor = m_dbRead.rawQuery(sql, null);
		return cursor.getCount();
	}

	public double getSumMoney(int year, int month, int day, int type)
	{
		if(year <= 0)
			return -1.0;

		String sql = null;
		Cursor cursor = null;
		if((year > 0) && (month < 0) && (day < 0))
		{
			sql = "select sum(money) from bill_record where year=? and type1=?";
			cursor = m_dbRead.rawQuery(sql, new String[]{
					Integer.toString(year),
					Integer.toString(type)
			});
		}

		else if((year > 0) && (month > 0) && (day < 0))
		{
			sql = "select sum(money) from bill_record where year=? and month=? and type1=?";
			cursor = m_dbRead.rawQuery(sql, new String[]{
					Integer.toString(year),
					Integer.toString(month),
					Integer.toString(type)
			});
		}
		else if((year > 0) && (month > 0) && (day > 0))
		{
			sql = "select sum(money) from bill_record where year=? and month=? and day=? and type1=?";

			cursor = m_dbRead.rawQuery(sql, new String[]{
					Integer.toString(year),
					Integer.toString(month),
					Integer.toString(day),
					Integer.toString(type)
			});
		}

		if(cursor.moveToFirst())
		{
			return cursor.getDouble(cursor.getColumnIndex("sum(money)"));
		}

		return -1.0;
	}

	public double getPeriod(int yearStart, int monthStart, int dayStart, int yearEnd, int monthEnd, int dayEnd, int type)
	{
		String sql = "select sum(money) from bill_record " +
				"where year>=? and year<=? " +
				"and month>=? and month<=? " +
				"and day>=? and day<=? " +
				"and type1=?";
		Cursor cursor = m_dbRead.rawQuery(sql, new String[]{
				Integer.toString(yearStart),
				Integer.toString(monthStart),
				Integer.toString(dayStart),
				Integer.toString(yearEnd),
				Integer.toString(monthEnd),
				Integer.toString(dayEnd),
				Integer.toString(type)
		});

		if(cursor.moveToFirst())
		{
			return cursor.getDouble(cursor.getColumnIndex("sum(money)"));
		}

		return -1.0;
	}

	// income_bill_type_tab operation
	public boolean AddIncomeBillTypeTab(BillTypes ddt)
	{
		if(FindInIncomeBillTypeTab(ddt) != null)
			return false;

		String sql1 = "select * from income_bill_type_tab";
		String sql2 = "insert into income_bill_type_tab (icon_name, icon_bg, icon_id) values(?,?,?)";

		int nCountBefore = 0;
		Cursor cursor = m_dbRead.rawQuery(sql1, null);
		if(cursor.moveToFirst())
			nCountBefore = cursor.getCount();

		int nBillIdRelative = GetIncomeBillIdRelative();
		ddt.nBillTypeID = nBillIdRelative + 1;

		m_dbWrite.beginTransaction();
		try
		{
			m_dbWrite.execSQL(sql2, new Object[]{
					ddt.strName,
					ddt.strPicture,
					ddt.nBillTypeID
			});
			m_dbWrite.setTransactionSuccessful();
		}
		finally
		{
			m_dbWrite.endTransaction();
		}

		cursor = m_dbRead.rawQuery(sql1, null);
		int nCountAfter = cursor.getCount();

		if(nCountBefore >= nCountAfter)
		{
			cursor.close();
			return false;
		}

		UpdateIncomeBillId(nBillIdRelative, ddt.nBillTypeID);
		cursor.close();
		return true;
	}

	public boolean DeleteInIncomeBillTypeTab(BillTypes ddt)
	{
		String sql2 = "delete from income_bill_type_tab where icon_id=?";

		if(FindInIncomeBillTypeTab(ddt) != null)
		{
			m_dbWrite.beginTransaction();
			try
			{
				m_dbWrite.execSQL(sql2, new Object[]{ddt.nBillTypeID});
				m_dbWrite.setTransactionSuccessful();
			}
			finally
			{
				m_dbWrite.endTransaction();
			}
		}
		else
			return false;

		if(FindInIncomeBillTypeTab(ddt) != null)
			return false;

		return true;
	}

	public BillTypes FindInIncomeBillTypeTab(BillTypes ddt)
	{
		String sql = "select * from income_bill_type_tab where icon_id=?";
		Cursor cursor = m_dbRead.rawQuery(sql, new String[]{Integer.toString(ddt.nBillTypeID)});
		if(cursor.moveToFirst())
		{
			BillTypes newddt = new BillTypes();
			newddt.strName = cursor.getString(cursor.getColumnIndex("icon_name"));
			newddt.strPicture = cursor.getString(cursor.getColumnIndex("icon_bg"));
			newddt.nBillTypeID = cursor.getInt(cursor.getColumnIndex("icon_id"));

			cursor.close();
			return newddt;
		}

		cursor.close();
		return null;
	}

	public boolean UpdateIncomeBillTypeTab(BillTypes ddt)
	{
		String sql = "update income_bill_type_tab " +
				"set icon_name=?,icon_bg=? " +
				"where icon_id=?";

		if(FindInIncomeBillTypeTab(ddt) != null)
			return false;

		m_dbWrite.beginTransaction();
		try
		{
			m_dbWrite.execSQL(sql, new Object[]{
					ddt.strName,
					ddt.strPicture,
					ddt.nBillTypeID
			});
			m_dbWrite.setTransactionSuccessful();
		}
		finally
		{
			m_dbWrite.endTransaction();
		}

		BillTypes newddt = FindInIncomeBillTypeTab(ddt);
		if(newddt == null)
			return false;

		return true;
	}

	public boolean GetAllIncomeBillType(ArrayList<BillTypes> arrBillTypeList)
	{
		arrBillTypeList.clear();

		String sql = "select * from income_bill_record";
		Cursor cursor = m_dbRead.rawQuery(sql, null);
		if(cursor.moveToFirst() == false)
			return false;

		int nItemCount = cursor.getCount();
		for(int i = 0; i < nItemCount; ++i)
		{
			BillTypes item = new BillTypes();

			item.strName = cursor.getString(cursor.getColumnIndex("icon_name"));
			item.strPicture = cursor.getString(cursor.getColumnIndex("icon_bg"));
			item.nBillTypeID = cursor.getInt(cursor.getColumnIndex("icon_id"));
			arrBillTypeList.add(item);
		}

		return true;
	}

	// pay_bill_type_tab operation
	public boolean AddPayBillTypeTab(BillTypes ddt)
	{
		if(FindInPayBillTypeTab(ddt) == null)
			return false;

		String sql1 = "select * from pay_bill_type_tab";
		String sql2 = "insert into pay_bill_type_tab (icon_name, icon_bg, icon_id) values(?,?,?)";

		int nCountBefore = 0;
		Cursor cursor = m_dbRead.rawQuery(sql1, null);
		if(cursor.moveToFirst())
			nCountBefore = cursor.getCount();

		int nPayBillTypeRelative = GetPayBillIdRelative();
		ddt.nBillTypeID = nPayBillTypeRelative + 1;

		m_dbWrite.beginTransaction();
		try
		{
			m_dbWrite.execSQL(sql2, new Object[]{
					ddt.strName,
					ddt.strPicture,
					ddt.nBillTypeID
			});
			m_dbWrite.setTransactionSuccessful();
		}
		finally
		{
			m_dbWrite.endTransaction();
		}

		cursor = m_dbRead.rawQuery(sql1, null);
		int nCountAfter = cursor.getCount();

		if(nCountBefore >= nCountAfter)
		{
			cursor.close();
			return false;
		}

		UpdatePayBillId(nPayBillTypeRelative, ddt.nBillTypeID);
		cursor.close();
		return true;
	}

	public boolean DeleteInPayBillTypeTab(BillTypes ddt)
	{
		String sql2 = "delete from pay_bill_type_tab where icon_id=?";

		if(FindInPayBillTypeTab(ddt) != null)
		{
			m_dbWrite.beginTransaction();
			try
			{
				m_dbWrite.execSQL(sql2, new Object[]{ddt.nBillTypeID});
				m_dbWrite.setTransactionSuccessful();
			}
			finally
			{
				m_dbWrite.endTransaction();
			}
		}
		else
			return false;

		if(FindInPayBillTypeTab(ddt) != null)
			return false;

		return true;
	}

	public BillTypes FindInPayBillTypeTab(BillTypes ddt)
	{
		String sql = "select * from pay_bill_type_tab where icon_id=?";
		Cursor cursor = m_dbRead.rawQuery(sql, new String[]{Integer.toString(ddt.nBillTypeID)});
		if(cursor.moveToFirst())
		{
			BillTypes newddt = new BillTypes();
			newddt.strName = cursor.getString(cursor.getColumnIndex("timestamp"));
			newddt.strPicture = cursor.getString(cursor.getColumnIndex("icon_bg"));
			newddt.nBillTypeID = cursor.getInt(cursor.getColumnIndex("icon_id"));

			cursor.close();
			return newddt;
		}

		cursor.close();
		return null;
	}

	public boolean UpdatePayBillTypeTab(BillTypes ddt)
	{
		String sql = "update pay_bill_type_tab " +
				"set icon_name=?,icon_bg=?" +
				"where icon_id=?";

		if(FindInPayBillTypeTab(ddt) != null)
			return false;

		m_dbWrite.beginTransaction();
		try
		{
			m_dbWrite.execSQL(sql, new Object[]{
					ddt.strName,
					ddt.strPicture,
					ddt.nBillTypeID
			});
			m_dbWrite.setTransactionSuccessful();
		}
		finally
		{
			m_dbWrite.endTransaction();
		}

		BillTypes newddt = FindInPayBillTypeTab(ddt);
		if(newddt == null)
			return false;

		return true;
	}

	public boolean GetAllPayBillType(ArrayList<BillTypes> arrPayBillTypeList)
	{
		arrPayBillTypeList.clear();

		String sql = "select * from pay_bill_record";
		Cursor cursor = m_dbRead.rawQuery(sql, null);
		if(cursor.moveToFirst() == false)
			return false;

		int nItemCount = cursor.getCount();
		for(int i = 0; i < nItemCount; ++i)
		{
			BillTypes item = new BillTypes();

			item.strName = cursor.getString(cursor.getColumnIndex("icon_name"));
			item.strPicture = cursor.getString(cursor.getColumnIndex("icon_bg"));
			item.nBillTypeID = cursor.getInt(cursor.getColumnIndex("icon_id"));
			arrPayBillTypeList.add(item);
		}

		return true;
	}

	// wallet_type_tab operation
	public boolean AddWalletTypeTab(WalletTypes ddt)
	{
		String sql1 = "select * from wallet_type_tab";
		String sql2 = "insert into wallet_type_tab (wallet_name, wallet_layout, wallet_color, wallet_id) values(?,?,?,?)";

		int nCountBefore = 0;
		Cursor cursor = m_dbRead.rawQuery(sql1, null);
		if(cursor.moveToFirst())
			nCountBefore = cursor.getCount();

		int nWalletTypeRelative = GetWalletIdRelative();
		ddt.nWalletTypeID = nWalletTypeRelative + 1;

		m_dbWrite.beginTransaction();
		try
		{
			m_dbWrite.execSQL(sql2, new Object[]{
					ddt.strName,
					ddt.strLayoutName,
					ddt.strColor,
					ddt.nWalletTypeID
			});
			m_dbWrite.setTransactionSuccessful();
		}
		finally
		{
			m_dbWrite.endTransaction();
		}

		cursor = m_dbRead.rawQuery(sql1, null);
		int nCountAfter = cursor.getCount();

		if(nCountBefore >= nCountAfter)
		{
			cursor.close();
			return false;
		}

		UpdateWalletId(nWalletTypeRelative, ddt.nWalletTypeID);
		cursor.close();
		return true;
	}

	public boolean DeleteInWalletTypeTab(WalletTypes ddt)
	{
		String sql2 = "delete from wallet_type_tab where wallet_id=?";

		if(FindInWalletTypeTab(ddt) != null)
		{
			m_dbWrite.beginTransaction();
			try
			{
				m_dbWrite.execSQL(sql2, new Object[]{Integer.toString(ddt.nWalletTypeID)});
				m_dbWrite.setTransactionSuccessful();
			}
			finally
			{
				m_dbWrite.endTransaction();
			}
		}

		if(FindInWalletTypeTab(ddt) != null)
			return false;

		return true;
	}

	public WalletTypes FindInWalletTypeTab(WalletTypes ddt)
	{
		String sql = "select * from bill_record where wallet_id=?";
		Cursor cursor = m_dbRead.rawQuery(sql, new String[]{Integer.toString(ddt.nWalletTypeID)});
		if(cursor.moveToFirst())
		{
			WalletTypes newddt = new WalletTypes();
			newddt.strName = cursor.getString(cursor.getColumnIndex("wallet_name"));
			newddt.strLayoutName = cursor.getString(cursor.getColumnIndex("wallet_layout"));
			newddt.strColor = cursor.getString(cursor.getColumnIndex("wallet_color"));
			newddt.nWalletTypeID = cursor.getInt(cursor.getColumnIndex("wallet_id"));

			cursor.close();
			return newddt;
		}

		return null;
	}

	public boolean UpdateWalletTypeTab(WalletTypes ddt)
	{
		String sql = "update wallet_type_tab " +
				"set wallet_name=?,wallet_layout=?,wallet_color=?" +
				"where wallet_id=?";

		if(FindInWalletTypeTab(ddt) != null)
			return false;

		m_dbWrite.beginTransaction();
		try
		{
			m_dbWrite.execSQL(sql, new Object[]{
					ddt.strName,
					ddt.strLayoutName,
					ddt.strColor,
					ddt.nWalletTypeID
			});
			m_dbWrite.setTransactionSuccessful();
		}
		finally
		{
			m_dbWrite.endTransaction();
		}

		WalletTypes newddt = FindInWalletTypeTab(ddt);
		if(newddt == null)
			return false;

		return true;
	}

	public boolean GetAllWalletTypeTab(ArrayList<WalletTypes> arrWalletTypesList)
	{
		arrWalletTypesList.clear();

		String sql = "select * from wallet_type_tab";
		Cursor cursor = m_dbRead.rawQuery(sql, null);
		if(cursor.moveToFirst() == false)
			return false;

		int nItemCount = cursor.getCount();
		for(int i = 0; i < nItemCount; ++i)
		{
			WalletTypes item = new WalletTypes();

			item.strName = cursor.getString(cursor.getColumnIndex("wallet_name"));
			item.strLayoutName = cursor.getString(cursor.getColumnIndex("wallet_layout"));
			item.strColor = cursor.getString(cursor.getColumnIndex("wallet_color"));
			item.nWalletTypeID = cursor.getInt(cursor.getColumnIndex("wallet_id"));
			arrWalletTypesList.add(item);
		}

		return true;
	}

	// member_tab operation
	public boolean AddMemberTab(String strNewMember)
	{
		String sql1 = "select * from member_tab";
		String sql2 = "insert into member_tab (member_name) values(?)";

		int nCountBefore = 0;
		Cursor cursor = m_dbRead.rawQuery(sql1, null);
		if(cursor.moveToFirst())
			nCountBefore = cursor.getCount();

		m_dbWrite.beginTransaction();
		try
		{
			m_dbWrite.execSQL(sql2, new Object[]{
					strNewMember
			});
			m_dbWrite.setTransactionSuccessful();
		}
		finally
		{
			m_dbWrite.endTransaction();
		}

		cursor = m_dbRead.rawQuery(sql1, null);
		int nCountAfter = cursor.getCount();

		if(nCountBefore >= nCountAfter)
		{
			cursor.close();
			return false;
		}

		cursor.close();
		return true;
	}

	public boolean UpdateMember(String strOldName, String strNewName)
	{
		String sql2 = "update member_name " +
				"set member_name=? " +
				"where member_name=?";

		m_dbWrite.beginTransaction();
		try
		{
			m_dbWrite.execSQL(sql2, new Object[]{
					strNewName,
					strOldName
			});
			m_dbWrite.setTransactionSuccessful();
		}
		finally
		{
			m_dbWrite.endTransaction();
		}

		return true;
	}

	public boolean GetAllMember(ArrayList<String> arrMemberList)
	{
		arrMemberList.clear();

		String sql = "select * from member_tab";
		Cursor cursor = m_dbRead.rawQuery(sql, null);
		if(cursor.moveToFirst() == false)
			return false;

		int nItemCount = cursor.getCount();
		for(int i = 0; i < nItemCount; ++i)
		{
			String item = new String();

			item = cursor.getString(cursor.getColumnIndex("member_name"));
			arrMemberList.add(item);
		}

		return true;
	}

	// id_relative_tab operation
	// Initialization id relative
	public boolean AddIdRelativeTab(int nIncomeBillTypeId, int nPayBillTypeId, int nWalletTypeId)
	{
		String sql1 = "select * from id_relative_tab";
		String sql2 = "insert into id_relative_tab (income_bill_id_relative, pay_bill_id_relative, wallet_id_relative) values(?,?,?)";

		int nCountBefore = 0;
		Cursor cursor = m_dbRead.rawQuery(sql1, null);
		if(cursor.moveToFirst())
			nCountBefore = cursor.getCount();

		if(nCountBefore != 0)
			return false;

		m_dbWrite.beginTransaction();
		try
		{
			m_dbWrite.execSQL(sql2, new Object[]{
					nIncomeBillTypeId,
					nPayBillTypeId,
					nWalletTypeId
			});
			m_dbWrite.setTransactionSuccessful();
		}
		finally
		{
			m_dbWrite.endTransaction();
		}

		cursor = m_dbRead.rawQuery(sql1, null);
		int nCountAfter = cursor.getCount();

		if(nCountBefore >= nCountAfter)
		{
			cursor.close();
			return false;
		}

		cursor.close();
		return true;
	}

	public int GetIncomeBillIdRelative()
	{
		String sql1 = "select * from id_relative_tab";

		int nResult = 0;
		Cursor cursor = m_dbRead.rawQuery(sql1, null);
		if(cursor.moveToFirst())
			nResult = cursor.getInt(cursor.getColumnIndex("income_bill_id_relative"));

		cursor.close();
		return nResult;
	}

	public boolean UpdateIncomeBillId(int nIncomeBillTypeOldId, int nIncomeBillTypeId)
	{
		String sql1 = "select * from id_relative_tab";
		String sql2 = "update id_relative_tab " +
				"set income_bill_id_relative=? " +
				"where income_bill_id_relative=?";

		int nCountBefore = 0;
		Cursor cursor = m_dbRead.rawQuery(sql1, null);
		if(cursor.moveToFirst())
			nCountBefore = cursor.getCount();

		if(nCountBefore != 1)
			return false;

		m_dbWrite.beginTransaction();
		try
		{
			m_dbWrite.execSQL(sql2, new Object[]{
					nIncomeBillTypeId,
					nIncomeBillTypeOldId
			});
			m_dbWrite.setTransactionSuccessful();
		}
		finally
		{
			m_dbWrite.endTransaction();
		}

		return true;
	}

	public int GetPayBillIdRelative()
	{
		String sql1 = "select * from id_relative_tab";

		int nResult = 0;
		Cursor cursor = m_dbRead.rawQuery(sql1, null);
		if(cursor.moveToFirst())
			nResult = cursor.getInt(cursor.getColumnIndex("pay_bill_id_relative"));

		cursor.close();
		return nResult;
	}

	public boolean UpdatePayBillId(int nPayBillTypeOldId, int nPayBillTypeNewId)
	{
		String sql1 = "select * from id_relative_tab";
		String sql2 = "update id_relative_tab " +
				"set pay_bill_id_relative=? " +
				"where pay_bill_id_relative=?";

		int nCountBefore = 0;
		Cursor cursor = m_dbRead.rawQuery(sql1, null);
		if(cursor.moveToFirst())
			nCountBefore = cursor.getCount();

		if(nCountBefore != 1)
			return false;

		m_dbWrite.beginTransaction();
		try
		{
			m_dbWrite.execSQL(sql2, new Object[]{
					nPayBillTypeNewId,
					nPayBillTypeOldId
			});
			m_dbWrite.setTransactionSuccessful();
		}
		finally
		{
			m_dbWrite.endTransaction();
		}

		return true;
	}

	public int GetWalletIdRelative()
	{
		String sql1 = "select * from id_relative_tab";

		int nResult = 0;
		Cursor cursor = m_dbRead.rawQuery(sql1, null);
		if(cursor.moveToFirst())
			nResult = cursor.getInt(cursor.getColumnIndex("wallet_id_relative"));

		cursor.close();
		return nResult;
	}

	public boolean UpdateWalletId(int nWalletOldId, int nWalletNewID)
	{
		String sql1 = "select * from id_relative_tab";
		String sql2 = "update id_relative_tab " +
				"set wallet_id_relative=? " +
				"where wallet_id_relative=?";

		int nCountBefore = 0;
		Cursor cursor = m_dbRead.rawQuery(sql1, null);
		if(cursor.moveToFirst())
			nCountBefore = cursor.getCount();

		if(nCountBefore != 1)
			return false;

		m_dbWrite.beginTransaction();
		try
		{
			m_dbWrite.execSQL(sql2, new Object[]{
					nWalletNewID,
					nWalletOldId
			});
			m_dbWrite.setTransactionSuccessful();
		}
		finally
		{
			m_dbWrite.endTransaction();
		}

		return true;
	}
}
