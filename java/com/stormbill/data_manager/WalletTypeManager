package com.stormbill.stormbill.data_manager;

import com.stormbill.stormbill.common_type.WalletTypes;
import com.stormbill.stormbill.database_manager.SQLiteDatabaseManager;

import java.util.ArrayList;

import static com.stormbill.stormbill.datastructs.ControlCenter.GetWalletTypes;

public class WalletTypeManager
{
	public static boolean LoadWalletType(ArrayList<WalletTypes> arrWalletType, SQLiteDatabaseManager sqLiteDatabaseManager)
	{
		if(arrWalletType == null)
			return false;

		return sqLiteDatabaseManager.LoadAllWalletType(arrWalletType);
	}

	public static boolean ModifyType(WalletTypes walletTypes, SQLiteDatabaseManager sqLiteDatabaseManager)
	{
		if(walletTypes == null || sqLiteDatabaseManager == null)
			return false;

		ArrayList<WalletTypes> arrayList = GetWalletTypes();
		if(arrayList == null)
			return false;

		int nIndex = GetIndexById(walletTypes);
		if(nIndex == -1)
			return false;

		if(sqLiteDatabaseManager.ModifyAWalletType(walletTypes) == false)
			return false;

		arrayList.get(nIndex).Instead(walletTypes);
		return true;
	}

	public static boolean ModifyName(int nIndex, String strNewName, SQLiteDatabaseManager sqLiteDatabaseManager)
	{
		if(strNewName == null || strNewName.length() == 0 || sqLiteDatabaseManager == null)
			return false;

		ArrayList<WalletTypes> arrayList = GetWalletTypes();
		if(arrayList == null || nIndex >= arrayList.size())
			return false;

		WalletTypes walletType = arrayList.get(nIndex);

		WalletTypes modifyWalletTypes = new WalletTypes();
		modifyWalletTypes.strName = strNewName;
		modifyWalletTypes.nWalletTypeID = walletType.nWalletTypeID;
		if(IsExitType(modifyWalletTypes))
			return false;

		if(sqLiteDatabaseManager.ModifyAWalletType(modifyWalletTypes) == false)
			return false;

		walletType.strName = strNewName;

		return true;
	}

	public static boolean DeleteSpecifiedType(WalletTypes walletTypes, SQLiteDatabaseManager sqLiteDatabaseManager)
	{
		ArrayList<WalletTypes> arrayList = GetWalletTypes();
		if(arrayList == null || sqLiteDatabaseManager == null)
			return false;

		int nIndex = GetIndexById(walletTypes);
		if(nIndex == -1)
			return false;

		if(sqLiteDatabaseManager.DeleteAWalletType(walletTypes) == false)
			return false;

		arrayList.remove(nIndex);
		return false;
	}

	public static boolean DeleteSpecifiedType(int nIndex, SQLiteDatabaseManager sqLiteDatabaseManager)
	{
		ArrayList<WalletTypes> arrayList = GetWalletTypes();
		if(arrayList == null || sqLiteDatabaseManager == null || nIndex >= arrayList.size())
			return false;

		if(sqLiteDatabaseManager.DeleteAWalletType(arrayList.get(nIndex)) == false)
			return false;

		arrayList.remove(nIndex);
		return true;
	}

	public static boolean AddNewType(WalletTypes eNewWalletTypes, SQLiteDatabaseManager sqLiteDatabaseManager)
	{
		ArrayList<WalletTypes> arrayList = GetWalletTypes();
		if(arrayList == null || sqLiteDatabaseManager == null)
			return false;

		if(IsExitType(eNewWalletTypes))
			return false;

		if(sqLiteDatabaseManager.AddAWalletType(eNewWalletTypes) == false)
			return false;

		arrayList.add(eNewWalletTypes);
		return true;
	}

	public static int GetIndexById(WalletTypes walletTypes)
	{
		ArrayList<WalletTypes> arrayList = GetWalletTypes();
		if(arrayList == null || walletTypes == null)
			return -1;

		for(int i = 0; i < arrayList.size(); ++i)
		{
			if(walletTypes.nWalletTypeID == arrayList.get(i).nWalletTypeID)
				return i;
		}

		return -1;
	}

	public static int GetIndexByName(String strName)
	{
		ArrayList<WalletTypes> arrayList = GetWalletTypes();
		if(arrayList == null)
			return -1;

		int nIndex = -1;
		for(int i = 0; i < arrayList.size(); ++i)
		{
			if(strName == arrayList.get(i).strName)
			{
				nIndex = i;
				break;
			}
		}

		return nIndex;
	}

	public static boolean IsExitType(WalletTypes eWalletType)
	{
		ArrayList<WalletTypes> arrayList = GetWalletTypes();
		if(arrayList == null || eWalletType == null)
			return false;

		for(int i = 0; i < arrayList.size(); ++i)
		{
			if(eWalletType.nWalletTypeID == arrayList.get(i).nWalletTypeID)
				return true;
		}

		return false;
	}
}
